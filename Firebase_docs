Short Report: What I’ve Learned About Firestore
Through building my ControlPanel component to save and manage Google Maps markers, I’ve gained a solid understanding of Firebase Firestore and how it fits into my React app. Here’s what I’ve picked up:

Firestore Basics:
Firestore is a NoSQL, document-based database that stores data in collections (like folders) and documents (like JSON objects).
For my app, I used a markers collection where each marker or polyline is a document with fields like type, position, path, icon, and timestamp.

Setting Up Firestore:
I created a Firebase project in the Console, grabbed the config (e.g., apiKey, projectId), and initialized it in my app with firebase.js.
I enabled Firestore in test mode, which let me read/write freely (to be secured later with rules).

Connecting to My App:
Installed the Firebase SDK (npm install firebase) and imported functions like collection, addDoc, and onSnapshot.
Used db (my Firestore instance) to interact with the markers collection directly from my React component.

Saving Data:
In handleOverlayComplete, I learned to save markers with addDoc(collection(db, "markers"), newShape).
I had to ensure the data was Firestore-compatible (e.g., no google.maps.Size objects), so I stored icon as a number index instead of the full icon object.

Loading Data in Real-Time:
Used onSnapshot to listen for changes in the markers collection, updating my drawnShapes state whenever data changes.
Learned to reconstruct Google Maps objects (like LatLng and marker icons) from Firestore’s JSON data when loading.

Common Pitfalls:
Ran into an "invalid data" error when I tried saving a google.maps.Size object—fixed by simplifying what I sent to Firestore.
Fixed an icon error (InvalidValueError) by mapping Firestore’s icon index back to my iconMapping object for Google Maps.

Deleting Data:
Added deleteDoc(doc(db, "markers", id)) in handleUndoLast to remove markers from Firestore, syncing the map and database.

Real-Time Power:
Discovered Firestore’s real-time syncing—changes in one browser instantly reflect in others, perfect for a collaborative map.

Takeaway
I’ve learned how to integrate Firestore into my React app to persist and sync map markers effortlessly. It’s flexible, fast, and beginner-friendly, though I need to be mindful of data types and plan for security rules later. This sets me up to expand my app—maybe adding user authentication or more complex queries next!